## 과정
| 단계                      | 입력               | 처리 내용                               | 출력                        | gcc 명령어 예시                |
| ----------------------- | ---------------- | ----------------------------------- | ------------------------- | ------------------------- |
| **전처리 (Preprocessing)** | `main.c`         | `#include`, `#define` 매크로 치환, 주석 제거 | `main.i` (확장된 C 코드)       | `gcc -E main.c -o main.i` |
| **컴파일 (Compilation)**   | `main.i`         | C 코드 → 어셈블리 코드 변환                   | `main.s` (어셈블리 코드)        | `gcc -S main.i -o main.s` |
| **어셈블 (Assembling)**    | `main.s`         | 어셈블리 → 목적 코드(기계어) 변환                | `main.o` (오브젝트 파일)        | `gcc -c main.s -o main.o` |
| **링크 (Linking)**        | `main.o` + 라이브러리 | 여러 목적 파일과 표준 라이브러리 연결               | 실행 파일 (`a.out` 또는 `main`) | `gcc main.o -o main`      |
| **실행 (Execution)**      | 실행 파일            | OS가 프로그램을 메모리에 적재하고 `main()`부터 실행   | 프로세스                      | `./main`                  |


## mac
- clang 기준
```
clang main.c -o main
```
- 컴파일러가 내부에서 전처리~링크까지 다 처리해 주는 것